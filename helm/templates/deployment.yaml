{{ if .Values.deployment.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      {{- if .Values.dbInitApp.enabled }}
      initContainers:
        - name: kotlin-db-init
          image: "{{ .Values.dbInitApp.image.name }}:{{ .Values.dbInitApp.image.tag }}"
          command: {{ .Values.dbInitApp.initCommand }}
      {{- end }}
      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.app.image.name }}:{{ .Values.app.image.tag }}"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: {{ .Values.app.container.port }}
              protocol: TCP
            {{- if .Values.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.app.container.metricsPort }}
              protocol: TCP
            {{- end }}
          livenessProbe:
            {{ toYaml $.Values.healthcheck.livenessProbe | nindent 12 }}
          readinessProbe:
            {{ toYaml $.Values.healthcheck.readinessProbe | nindent 12 }}
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        {{- if .Values.database.enabled }}
        - name: {{ .Release.Name }}-database
          image: "{{ .Values.database.image.name }}:{{ .Values.database.image.tag }}"
          env:
            - name: MYSQL_RANDOM_ROOT_PASSWORD #For the sake of the demo 
              value: "true"
        {{- end }}
{{- end }}
